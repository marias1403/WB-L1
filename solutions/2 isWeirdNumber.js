// Условие. Задача о странных числах: Напишите функцию, которая принимает число и возвращает true,
// если это число является странным, и false в противном случае.
// Странным числом считается число, которое равно сумме всех своих делителей, кроме самого себя.

// Решение. Представлено 3 способа решения задачи

// 1 способ (оптимальный). Перебираем числа от 1 до квадратного корня от входного number, потому что
// если number делится на число n, то можно найти второй делитель с помощью деления number на n
// второй делитель будет равен m = number / n, потому что n * m = number
// При этом наибольшее число в такой паре может быть только до √number (квадратного корня от number),
// потому что number = √number * √number
// Таким образом, ты time complexity будет равен только O(√n)
function isWeirdNumber1(number) {
  if (number <= 0) {
    return false; // Отрицательное число и ноль не могут быть странными числами
  }
  // Инициализируем переменную, куда будем складывать найденные делители числа.
  // Используем let, чтобы мы могли изменять значение переменной
  let sumOfDivisors = 0;
  // Проходимся циклом и проверяем, если i в квадрате меньше или равно number
  for (let i = 1; i * i <= number; i++) {
  // Если остаток от деления входного числа на i равно нулю, то суммируем значение i к сумме делителей
    if (number % i === 0) {
      sumOfDivisors += i;
  // Проверяем, если квадрат от i не равно number, чтобы новый делитель отличался от i
      if (i * i !== number) {
  // Находим новый делитель делением number на i и добавляем к сумме делителей
        sumOfDivisors += number / i;
      }
    }
  }
  // Отнимаем само число от суммы делителей, потому что в странном числе не считается само число и сравниваем.
  // Возвращаем true или false
  return sumOfDivisors - number === number;
}

// Пример использования функции:
console.log(isWeirdNumber1(6)); // true
console.log(isWeirdNumber1(12)); // false
console.log(isWeirdNumber1(28)); // true


// 2 способ (оптимальный). Решение с помощью теоремы Евклида-Эйлера
// Евклид доказал, что 2^(p-1)*(2^p - 1) — это четное совершенное(странное) число,
// если (2^p - 1) — простое число (число Мерсенна) и p — это тоже простое число.
// Большие значения p могут привести к слишком большим совершенным числам,
// которые не умещаются в 64 битах, поэтому мы оцениваем совершенные числа только
// для определенных простых чисел: 2, 3, 5, 7, 13, 17, 19, 31

// Функция по формуле для нахождения совершенного (странного) числа
// Оператор << сдвигает биты числа 1 влево на (p - 1) разряд,
// это эквивалентно возведению числа 2 в степень (p - 1)
// Аналогично для второй части формулы
function weirdNumber(p) {
  return (1 << (p - 1)) * ((1 << p) - 1);
}
function isWeirdNumber2(number) {
  const primes = [2, 3, 5, 7, 13, 17, 19, 31];
  for (const prime of primes) {
    if (weirdNumber(prime) === number) {
      return true;
    }
  }
  return false;
}

// Пример использования функции:
console.log(isWeirdNumber2(6)); // true
console.log(isWeirdNumber2(12)); // false
console.log(isWeirdNumber2(28)); // true


// 3 способ (неоптимальный). Простой перебор делителей
function isWeirdNumber3(number) {
  if (number <= 0) {
    return false; // Отрицательное число и ноль не могут быть странными числами
  }
  // Инициализируем переменную, куда будем складывать найденные делители числа.
  // Используем let, чтобы мы могли изменять значение переменной
  let sumOfDivisors = 0;
  // Проходимся циклом и находим делители числа
  for (let i = 1; i <= number; i++) {
  // Если остаток от деления входного числа на i равно нулю, то суммируем значение i к сумме делителей и идем дальше по циклу
    if (number % i === 0) {
      sumOfDivisors += i;
    }
  // Немного оптимизируем код, добавив проверку. Если сумма больше числа, то сразу возвращаем false
    if (sumOfDivisors > number) {
      return false;
    }
  }
  // Когда цикл завершился, возвращаем true или false, в зависимости от сравнения значений входного числа и переменной
  return sumOfDivisors === number;
}

// Пример использования функции:
console.log(isWeirdNumber3(6)); // true
console.log(isWeirdNumber3(12)); // false
console.log(isWeirdNumber3(28)); // true
